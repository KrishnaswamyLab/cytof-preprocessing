addpath('../Source');

%% Test 1
M = [1 1; 0 0; -1 -1; -2 -2; 2 2];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(M);
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, zeroIndicatorMatrix);
oracleDiffusedNormalizedAffinityMatrix = diffuse(full(normalizedAffinityMatrix), ...
                                                 'numDiffusionSteps', 2, ...
                                                 'mode', 'exact');
diffusedNormalizedAffinityMatrix = diffuse(full(normalizedAffinityMatrix), ...
                                           'numDiffusionSteps', 2, ...
                                           'mode', 'nystroem', ...
                                           'nystroemN', 5);
assert(sum(sum(abs(  oracleDiffusedNormalizedAffinityMatrix ...
                   - diffusedNormalizedAffinityMatrix))) < 0.5);

%% Test 2: Test diffusion using weighting.
samples = [1; 1; 2; 3];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(samples);
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, zeroIndicatorMatrix);
oracleDiffusedNormalizedAffinityMatrix = diffuse(full(normalizedAffinityMatrix), ...
                                                 'numDiffusionSteps', 5, ...
                                                 'mode', 'exact');
samples = [1; 2; 3];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(samples);
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, zeroIndicatorMatrix, 'weights', [2, 1, 1]);
diffusedNormalizedAffinityMatrix = diffuse(full(normalizedAffinityMatrix), ...
                                           'numDiffusionSteps', 5, ...
                                           'mode', 'exact', ...
                                           'weights', [2, 1, 1]);
assert(sum(sum(abs(  diffusedNormalizedAffinityMatrix ...
                   - oracleDiffusedNormalizedAffinityMatrix([1 3 4], [1 3 4])))) < 0.001);
