addpath('../Source');

%% Test 1
distanceMatrix = [0 0 1; 0 0 2; 2 1 0];
zeroIndicatorMatrix = [1 1 0; 1 1 0; 0 0 1];
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                        zeroIndicatorMatrix, ...
                                                        'sigma', 2, ...
                                                        'exponent', 2);
oracleNormalizedAffinityMatrix = [1 1 exp(-1/8); 1 1 exp(-4/8); exp(-4/8) exp(-1/8) 1];
degreeMatrix = diag(sum(oracleNormalizedAffinityMatrix, 2));
oracleNormalizedAffinityMatrix = degreeMatrix^-1 * oracleNormalizedAffinityMatrix;
assert(sum(sum(abs(oracleNormalizedAffinityMatrix-normalizedAffinityMatrix))) < 0.000001);

%% Test 2
samples = [1 ; 2 ; 2 ; 101 ; 102 ; 102];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(samples, 'k_knn', 3);
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                        zeroIndicatorMatrix, ...
                                                        'sigma', 0.5, ...
                                                        'exponent', 1);
v1 = exp(-2);
oracleNormalizedAffinityMatrix = [1  v1 v1 0  0  0; ...
                                  v1 1  1  0  0  0; ...
                                  v1 1  1  0  0  0; ...
                                  0  0  0  1  v1 v1; ...
                                  0  0  0  v1 1  1; ...
                                  0  0  0  v1 1  1];
degreeMatrix = diag(sum(oracleNormalizedAffinityMatrix, 2));
oracleNormalizedAffinityMatrix = degreeMatrix^-1 * oracleNormalizedAffinityMatrix;
assert(sum(sum(abs(oracleNormalizedAffinityMatrix-normalizedAffinityMatrix))) < 0.000001);

%% Test 3: Test weighting feature.
samples = [ 1 0 1; 1 1 1];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(samples, 'k_knn', 3);
weights = [1 2];
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                        zeroIndicatorMatrix, ...
                                                        'sigma', 0.5, ...
                                                        'exponent', 2, ...
                                                        'weights', weights);
samples = [ 1 0 1; 1 1 1; 1 1 1];
[distanceMatrix, zeroIndicatorMatrix] = calcDistanceMatrix(samples, 'k_knn', 3);
oracleNormalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                              zeroIndicatorMatrix, ...
                                                              'sigma', 0.5, ...
                                                              'exponent', 2);
assert(sum(sum(abs(oracleNormalizedAffinityMatrix(1:2, 1:2)-normalizedAffinityMatrix))) < 0.000001);

%% Test 4: Testing column normalization
distanceMatrix = [0 2 1; 2 0 1; 1 1 0];
zeroIndicatorMatrix = [1 0 0; 0 1 0; 0 0 1];
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                        zeroIndicatorMatrix, ...
                                                        'mode', 'cstochastic', ...
                                                        'sigma', 2, ...
                                                        'exponent', 2);
oracleNormalizedAffinityMatrix = [1         exp(-4/8) exp(-1/8) ; ...
                                  exp(-4/8) 1         exp(-1/8) ; ...
                                  exp(-1/8) exp(-1/8) 1         ];
oracleNormalizedAffinityMatrix(:, 1) =   oracleNormalizedAffinityMatrix(:, 1) ...
                                       / sum(oracleNormalizedAffinityMatrix(:, 1));
oracleNormalizedAffinityMatrix(:, 2) =   oracleNormalizedAffinityMatrix(:, 2) ...
                                       / sum(oracleNormalizedAffinityMatrix(:, 2));
oracleNormalizedAffinityMatrix(:, 3) =   oracleNormalizedAffinityMatrix(:, 3) ...
                                       / sum(oracleNormalizedAffinityMatrix(:, 3));
assert(sum(sum(abs(oracleNormalizedAffinityMatrix-normalizedAffinityMatrix))) < 0.000001);

%% Test 5: Testing full normalization
distanceMatrix = [0 2 1; 2 0 1; 1 1 0];
zeroIndicatorMatrix = [1 0 0; 0 1 0; 0 0 1];
normalizedAffinityMatrix = calcNormalizedAffinityMatrix(distanceMatrix, ...
                                                        zeroIndicatorMatrix, ...
                                                        'mode', 'fstochastic', ...
                                                        'sigma', 2, ...
                                                        'exponent', 2);
oracleNormalizedAffinityMatrix = [1         exp(-4/8) exp(-1/8) ; ...
                                  exp(-4/8) 1         exp(-1/8) ; ...
                                  exp(-1/8) exp(-1/8) 1         ];
rowSums = sum(oracleNormalizedAffinityMatrix, 2);
colSums = sum(oracleNormalizedAffinityMatrix, 1);
oracleNormalizedAffinityMatrix(:, 1) =   oracleNormalizedAffinityMatrix(:, 1) ...
                                       / sqrt(colSums(1));
oracleNormalizedAffinityMatrix(:, 2) =   oracleNormalizedAffinityMatrix(:, 2) ...
                                       / sqrt(colSums(2));
oracleNormalizedAffinityMatrix(:, 3) =   oracleNormalizedAffinityMatrix(:, 3) ...
                                       / sqrt(colSums(3));
oracleNormalizedAffinityMatrix(1, :) =   oracleNormalizedAffinityMatrix(1, :) ...
                                       / sqrt(rowSums(1));
oracleNormalizedAffinityMatrix(2, :) =   oracleNormalizedAffinityMatrix(2, :) ...
                                       / sqrt(rowSums(2));
oracleNormalizedAffinityMatrix(3, :) =   oracleNormalizedAffinityMatrix(3, :) ...
                                       / sqrt(rowSums(3));
assert(sum(sum(abs(oracleNormalizedAffinityMatrix-normalizedAffinityMatrix))) < 0.000001);
